name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Setting up .env
        run: |
          echo "DB_CONNECTION=mysql" > .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=schedule" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=" >> .env

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate timestamp-based tag
        id: tag
        run: echo "TIMESTAMP_TAG=$(date +'%y%m%d')" >> $GITHUB_ENV

      - name: Build Docker image (Laravel)
        run: |
          docker build --no-cache -t alvarobk/scheduleapp:${{ env.TIMESTAMP_TAG }} .

      - name: Build Docker image (Nginx)
        run: |
          docker build --no-cache -t alvarobk/schedulenginx:${{ env.TIMESTAMP_TAG }} ./docker/nginx

      # Static Application Security Testing (SAST) with Trivy
      - name: Trivy Scan (SAST)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          exit-code: '0'
          format: 'table'
          severity: 'HIGH,CRITICAL'

      # Software Composition Analysis (SCA) with Trivy
      - name: Trivy Scan (SCA)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'alvarobk/scheduleapp:${{ env.TIMESTAMP_TAG }}'
          exit-code: '0'
          format: 'table'
          severity: 'HIGH,CRITICAL'

    

      # Dynamic Application Security Testing (DAST) with OWASP ZAP
      - name: ZAP Scan (DAST)
        uses: zaproxy/action-baseline@v0.6.1
        with:
          docker_name: 'owasp/zap2docker-stable'
          target: 'http://testphp.vulnweb.com/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      # Interactive Application Security Testing (IAST) approach using OWASP ZAP in interactive mode
      - name: Start Application for DAST AND IAST
        run: |
          docker-compose up -d
      
      - name: OWASP ZAP
        uses: zaproxy/action-baseline@v0.4.0
        with:
          # Target URL
          target: "http://localhost:8000"
          fail_action: false
          token: $
          issue_title: Security Tests    
          
      - name: IAST with OWASP ZAP
        run: |
          docker run -d -u zap -p 8080:8080 owasp/zap2docker-stable:latest zap-api-scan.py -t http://localhost:8000/swagger.json
          docker run -t owasp/zap2docker-stable:latest zap-full-scan.py -t http://localhost:8000

      - name: Push Docker images
        run: |
          docker push alvarobk/scheduleapp:${{ env.TIMESTAMP_TAG }}
          docker push alvarobk/schedulenginx:${{ env.TIMESTAMP_TAG }}
