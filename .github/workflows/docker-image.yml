name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Setting up .env
        run: |
          echo "${{ secrets.SCHEDULE_PRODUCTION_ENV }}" > .env

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate timestamp-based tag
        id: tag
        run: echo "TIMESTAMP_TAG=$(date +'%y%m%d')" >> $GITHUB_ENV

      - name: Build Docker image (Laravel)
        run: |
          docker build --no-cache -t alvarobk/scheduleapp:${{ env.TIMESTAMP_TAG }} .

      - name: Build Docker image (Nginx)
        run: |
          docker build --no-cache -t alvarobk/schedulenginx:${{ env.TIMESTAMP_TAG }} ./docker/nginx

      - name: Scan Laravel Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: alvarobk/scheduleapp:${{ env.TIMESTAMP_TAG }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          scanners: 'vuln'  # Disable secret scanning

      - name: Scan Nginx Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: alvarobk/schedulenginx:${{ env.TIMESTAMP_TAG }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          scanners: 'vuln'  # Disable secret scanning

      - name: Docker push images
        run: |
          docker push alvarobk/scheduleapp:${{ env.TIMESTAMP_TAG }}
          docker push alvarobk/schedulenginx:${{ env.TIMESTAMP_TAG }}

      - name: Scan PHP dependencies for vulnerabilities with Enlightn
        run: |
          docker run --rm alvarobk/scheduleapp:${{ env.TIMESTAMP_TAG }} php artisan enlightn --no-interaction

      # - name: SAST (Static Application Security Testing)
      #   uses: github/codeql-action/init@v2
      #   with:
      #     languages: 'javascript,python'
      #   - run: |
      #       sudo apt-get install jq
      #       curl -s https://api.github.com/repos/github/codeql-action/releases/latest | jq -r '.assets[].browser_download_url | select(contains("ubuntu"))' | xargs curl -L -o codeql-ubuntu.tar.gz
      #       tar -xzf codeql-ubuntu.tar.gz -C /home/runner
      #       /home/runner/codeql/codeql database create codeql-db -s . -l javascript,python

      - name: SCA (Software Composition Analysis)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: alvarobk/scheduleapp:${{ env.TIMESTAMP_TAG }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          scanners: 'config'  # Enable IaC scanning

      - name: DAST (Dynamic Application Security Testing)
        uses: zaproxy/action-full-scan@v0.6.0
        with:
          target: 'http://localhost:8080'
        env:
          DOCKER_SCAN: true
          DOCKER_TARGET: 'alvarobk/scheduleapp:${{ env.TIMESTAMP_TAG }}'

      - name: IAST (Interactive Application Security Testing)
        uses: contrastsecurity/contrast-scan-action@v1
        with:
          application_id: ${{ secrets.CONTRAST_APP_ID }}
          api_key: ${{ secrets.CONTRAST_API_KEY }}
          service_key: ${{ secrets.CONTRAST_SERVICE_KEY }}
          user_name: ${{ secrets.CONTRAST_USER_NAME }}

      - name: IaC (Infrastructure as Code) Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          soft-fail: true

      - name: API Security Testing
        uses: 42crunch/api-security-audit-action@v1
        with:
          file_path: './api-spec.yaml'
          token: ${{ secrets.CRUNCH_API_TOKEN }}

