name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  push_to_registry:
    name: Scan vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Scan Laravel Docker image for vulnerabilities (SCA)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: iamdocker100/scheduleapp:${{ env.TIMESTAMP_TAG }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          scanners: 'vuln'  

      - name: Scan Nginx Docker image for vulnerabilities (SAST)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: iamdocker100/schedulenginx:${{ env.TIMESTAMP_TAG }}
          scan-type: 'fs'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          scanners: 'vuln' 
          
      - name: Run Gitleaks (SCC)
        id: gitleaks
        uses: DariuszPorowski/github-action-gitleaks@v2
        with:
          fail: false

      - name: Post PR comment
        uses: actions/github-script@v6
        if: ${{ steps.gitleaks.outputs.exitcode == 1 && github.event_name == 'pull_request' }}
        with:
          github-token: ${{ github.token }}
          script: |
            const { GITLEAKS_RESULT, GITLEAKS_OUTPUT } = process.env
            const output = `### ${GITLEAKS_RESULT}

            <details><summary>Log output</summary>

            ${GITLEAKS_OUTPUT}

            </details>
            `
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: output
            })
        env:
          GITLEAKS_RESULT: ${{ steps.gitleaks.outputs.result }}
          GITLEAKS_OUTPUT: ${{ steps.gitleaks.outputs.output }}     

      - name: Docker push images
        run: |
          docker push iamdocker100/scheduleapp:${{ env.TIMESTAMP_TAG }}
          docker push iamdocker100/schedulenginx:${{ env.TIMESTAMP_TAG }}

      - name: Scan JavaScript dependencies for vulnerabilities with npm audit
        run: npm audit --audit-level=high

      - name: Set up Docker Compose
        run: |
         docker-compose up -d

      - name: StackHawk HawkScan Action (DAST)
        uses: stackhawk/hawkscan-action@v2.1.3
        with:
          apiKey: ${{ secrets.HAWK_API_KEY }}        
     
    
                  

       
    
        

